global !p
def to_kebab_case(str):
	import re
	return re.sub(r'(?<!^)(?=[A-Z])', '-', str).lower()
endglobal

snippet im "import" b
import {${2}} from '${1}';
endsnippet

snippet imu "import ui" b
import {${1:component}} from 'packages/ui/`!p snip.rv = to_kebab_case(t[1])`';
endsnippet

snippet ime "import entitiy" b
import {${2}} from 'packages/geoadv-entities/${1};
endsnippet

snippet cl "console.log" b
console.log(${0});
endsnippet

snippet cll "console.log labeled" b
console.log('=============================+>', ${0});
endsnippet

snippet de "debugger" b
debugger;
endsnippet

snippet l "let statement" b
let ${0}
endsnippet

snippet dl "destructuring let statement" b
let {${2}} = ${1};
endsnippet

snippet c "const statement" b
const ${0}
endsnippet

snippet dc "destructuring const statement" b
const {${2}} = ${1};
endsnippet

snippet f "anonymous function" i
function (${1:arguments}) {
	${0}
}
endsnippet

snippet fn "named function" i
function ${1:name} (${1:arguments}) {
	${0}
}
endsnippet

snippet fa "arrow function" i
(${1:arguments}) => ${2:statement}
endsnippet

snippet fab "arrow function" i
(${1:arguments}) => {
	${0}
}
endsnippet

snippet r "return" b
return ${0};
endsnippet

snippet rc "return complex value (such as JSX components)" b
return (
	${0}
);
endsnippet

snippet pr "Promise" i
new Promise((resolve, reject) => {
	${0}
});
endsnippet
